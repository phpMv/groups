<?php
namespace controllers\crud\viewers;

use Ajax\semantic\html\elements\HtmlLabel;
use Ubiquity\controllers\crud\viewers\ModelViewer;
use Ubiquity\utils\http\USession;

/**
  * Class CrudUsersViewer
  */
class CrudUsersViewer extends ModelViewer{
	public function getCaptions($captions, $className) {
		return ['Prénom','Nom','Email','Suspendu ?','Groupes'];
	}

	public function isModal($objects, $model) {
		return false;
	}

	public function getModelDataTable($instances, $model, $totalCount, $page = 1) {
		$res= parent::getModelDataTable($instances, $model, $totalCount, $page);
		$this->updateWidgetFields($res);
		return $res;
	}

	private function updateWidgetFields($widget){
		$widget->fieldAsCheckbox('suspended');
		$widget->setValueFunction('groups',function($value,$instance){
			$result=[];
			$groupes=$instance->getGroups();
			if(is_array($groupes)) {
				foreach ($groupes as $groupe) {
					$lbl = new HtmlLabel('grp-' . $groupe->getId(), $groupe);
					$lbl->addIcon('people arrows');
					$lbl->addClass('basic inverted');
					$result[] = $lbl;
				}
			}
			return $result;
		});
	}

	public function getModelDataElement($instance, $model, $modal) {
		$res= parent::getModelDataElement($instance, $model, $modal);
		$this->updateWidgetFields($res);
		return $res;
	}

	public function recordsPerPage($model, $totalCount = 0) {
		return 40;
	}

	protected function getDataTableRowButtons() {
		return [ 'display','edit','delete' ];
	}

	public function getForm($identifier, $instance, $updateUrl = 'updateModel') {
		$res=parent::getForm($identifier,$instance,$updateUrl);
		$res->fieldAsHidden('id');
		$res->fieldAsHidden('idOrganization');
		return $res;
	}

	public function getFormCaptions($captions, $className, $instance) {
		return ['','Prénom','Nom','Email','Suspendu ?','Groupes'];
	}

	public function getElementCaptions($captions, $className, $instance) {
		return parent::getElementCaptions($captions, $className, $instance); // TODO: Change the autogenerated stub
	}


}
